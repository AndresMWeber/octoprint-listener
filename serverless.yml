service: octoprint-listener
org: andresmweber
app: my-first-app
plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-git-variables
  - serverless-offline
  - serverless-bundle
  - serverless-export-env
package:
  include:
    - lambdas/**
  exclude:
    - ./node_modules/
    - tests/**
  individually: true
provider:
  name: aws
  runtime: nodejs12.x
  profile: aw-serverless
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  tags:
    GLOBAL-TAG2: bar
  environment:
    DEBUG: ${env:DEBUG, ''}
    SLS_DEBUG: ${env:SLS_DEBUG, ''}
    REGION: ${self:provider.region}
    STAGE: ${env:STAGE, self:provider.stage}
    BASE_URL: ${self:custom.apiEndpoints.${git:branch}, self:custom.apiEndpoints.${self:provider.stage}, self:custom.resourcesStages.dev}
    SLACK_URL: ${ssm:/aw/slack/octoprint~true}
    BUCKET: ${self:custom.imageBucket}
    BRANCH: ${self:custom.serverlessBranch, self:custom.gitBranch}
    GIT_COMMIT_LONG: ${self:custom.gitCommitLong}
    GIT_TAGS: ${self:custom.gitTags}
    GIT_IS_DIRTY: ${self:custom.gitDirty}
    GIT_BRANCH: ${self:custom.gitBranch}
    GIT_REPOSITORY: ${self:custom.gitRepo}
    GIT_DESCRIPTION: ${self:custom.gitDescription}
    GIT_DESCRIPTION_LONG: ${self:custom.gitDescriptionLong}
    SLS_CI_GIT_BRANCH: ${self:custom.serverlessBranch}
    SLS_CI_GIT_USER: ${self:custom.serverlessGitUser}
    SLS_CI_GIT_ORG: ${self:custom.serverlessGitOrg}
    SLS_CI_STAGE: ${self:custom.serverlessStage}
    SLS_CI_REPO: ${self:custom.serverlessRepo}
    SLS_CI_REPO_OWNER: ${self:custom.serverlessRepoOwner}
    SLS_CI_COMMIT_MSG: ${self:custom.serverlessCommitMessage}
    SLS_CI_BUILD_ID: ${self:custom.serverlessBuildId}
    COVERALLS_SERVICE_NAME: serverless
    COVERALLS_REPO_TOKEN: ${ssm:/aw/octo-listener/coveralls~true}
    COVERALLS_GIT_BRANCH: ${self:custom.serverlessBranch, self:custom.gitBranch}
custom:
  imageBucket: octoprint-listener-snapshot-${self:provider.stage}-bucket
  gitCommitLong: ${env:GIT_COMMIT_LONG, git:sha1}
  gitTags: ${env:TAGS, git:tags}
  gitDirty: ${env:GIT_IS_DIRTY, git:isDirty}
  gitBranch: ${git:branch}
  gitRepo: ${env:GIT_REPOSITORY, git:repository}
  gitDescription: ${env:GIT_DESCRIPTION, git:describe}
  gitDescriptionLong: ${git:repository} - ${git:branch} - ${git:tags}
  serverlessBranch: ${env:SERVERLESS_BRANCH, ''}
  serverlessGitUser: ${env:SERVERLESS_COMMIT_USER, ''}
  serverlessGitOrg: ${env:SERVERLESS_ORG, ''}
  serverlessStage: ${env:SERVERLESS_PLATFORM_STAGE, ''}
  serverlessRepo: ${env:SERVERLESS_REPO, ''}
  serverlessRepoOwner: ${env:SERVERLESS_REPO_OWNER, ''}
  serverlessCommitMessage: ${env:SERVERLESS_COMMIT_MSG, ''}
  serverlessBuildId: ${env:SERVERLESS_BUILD_ID, ''}
  apiEndpoints:
    prod: https://www.example.com/api/prod
    dev: https://www.example.com/api/dev
    master: https://www.example.com/api/master

iamRoleStatements:
  - Effect: 'Allow'
    Action:
      - 's3:ListBucket'
    Resource: { 'Fn::Join': ['', ['arn:aws:s3:::', { 'Ref': 'OctoprintSnapshotBucket' }]] }
  - Effect: 'Allow'
    Action:
      - 's3:PutObject'
    Resource:
      Fn::GetAtt: [OctoprintSnapshotBucket, Arn]

functions:
  receiveWebhook:
    handler: src/lambdas/receiveWebhook.handler
    description: ${self:custom.gitDescription}
    events:
      - http:
          path: webook
          method: POST
          cors: true
    environment:
      BUCKET: !Ref OctoprintSnapshotBucket
  getUser:
    handler: src/lambdas/getUser.handler
    description: ${self:custom.gitDescription}
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true

# you can add CloudFormation resource templates here
resources:
  Description: >
    ${self:service} ${git:branch}:${git:sha1}
    https://github.com/andresmweber/octoprint-listener
    ${git:message}
  Resources:
    OctoprintSnapshotBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.imageBucket}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
  Outputs:
    NewOutput:
      Description: 'Description for the output'
      Value: 'Some output value'
